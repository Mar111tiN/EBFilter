#! /usr/bin/env python

from ebfilter.run import main
import argparse


parser = argparse.ArgumentParser(prog="makeEBcache")

parser.add_argument("--version", action="version", version="EBFilter-1.0.0")

parser.add_argument('-t', metavar="thread_num", default='1', type=int,
                    help="the number of threads (< 10 not recommended)")

parser.add_argument("-log", metavar="log.txt", type=str,
                    help="the path to log file")

# ################################# I/O ###################################################

parser.add_argument("pon_list", metavar="PoN.txt", type=str,
                    help="the list of paths to PanelOfNormals bam files (+ .bai)")

parser.add_argument("cache_folder", metavar="EB_cache_folder", type=str,
                    help="the path to the folder for storing the cache files")

# ################################# OPTIONAL ###################################################

parser.add_argument("-chrom", metavar="chromosome", type=str, default=None,
                    help="restrict caching to a certain chromosome")

parser.add_argument("-bed_file", metavar="bed_file.bed", type=str, default=None,
                    help="the path to bed file used on the bams in the PoN list (-l option for mpileup)")

parser.add_argument("-force_caching", metavar="force_caching", type=bool, default=False,
                    help="if true, a cache file is generate for the entire genome covered by the PoN - potentially takes ages!!")

# ################################# PILEUP PARAMS ############################################

parser.add_argument('-q', metavar="mapping_qual_thres", default='20', type=int,
                    help="threshold for mapping quality for calculating base counts")

parser.add_argument('-Q', metavar="base_qual_thres", default='15', type=int,
                    help="base quality threshold for calculating base counts")

parser.add_argument('--ff', metavar="filter_flags", default='UNMAP,SECONDARY,QCFAIL,DUP', type=str,
                    help="skip reads with mask bits set")

# ################################# BETA-BINOMIAL ############################################
parser.add_argument('-fit_with', metavar="penalty_term_for_fitting", default='0.5', type=float,
                    help="penalty term for beta binomial fitting parameters")

# ################################ DEBUG #####################################################

parser.add_argument("--debug", default=False, action='store_true', help="keep intermediate files")

args = parser.parse_args()

main(args_dict, make_cache=True)
