def partition_anno(anno_path, out_path, threads):

    
    with open(anno_path, 'r') as file_in:
        # get line number
        record_num = sum(1 for line in file_in)
        file_in.seek(0,0)
        threads = min(record_num, threads)
        # get lines per subprocess
        frac_lines = record_num / threads

        current_sub = current_line = 0
        file_out = open(f"{out_path}.{current_sub}", 'w')
        for line in file_in:
            print(line.rstrip("\n"), file=file_out) 
            current_line += 1
            if (current_line >= frac_lines) and (current_sub < threads - 1):
                current_sub += 1
                current_line = 0
                file_out.close()
                file_out = open(f"{out_path}.{current_sub}", 'w')
        file_out.close()

    return threads


def merge_anno(out_path, threads):

    file_out = open(out_path, 'w')
    for i in range(threads):
        file_in = open(f"{out_path}.{i}", 'r')
        for line in file_in:
            print(line.rstrip('\n'), file=file_out)


def anno2pileup(anno_path, out_path, bam_or_pon, region):
    '''
    creates a pileup from all the entries in the anno file
    '''
    with open(log_file, 'w') as log:
        with open(anno_path, 'r') as file_in:
            with open(out_path, 'w') as file_out:
                mpileup_cmd = ["samtools", "mpileup", "-B", "-d", "10000000", "-q", _q, "-Q", _Q, "--ff", _ff]

                # add tumor_bam or pon_list of bam files depending on file extension of bam_or_pon
                if (os.path.splitext(bam_or_pon)[-1] == '.bam'):
                    mpileup_cmd += [bam_or_pon]
                    out_path += ".target.pileup"
                else:
                    mpileup_cmd += ["-b", bam_or_pon]
                    out_path += ".control.pileup"
                if is_loption:
                    # region_list.bed is generated by worker_anno
                    mpileup_cmd += ["-l", f"{anno_path}.region_list.bed"]

                    if region:
                        mpileup_cmd = mpileup_cmd + ["-r", region]
                    subprocess.check_call([str(command) for command in mpileup_cmd], stdout=file_out, stderr=log) # maybe logging
                # no loption 
                else: 
                    # get lines of anno file
                    for line in file_in:
                        print('anno2pileup', line, bam_or_pon)
                        field = line.rstrip('\n').split('\t')
                        loc = int(field[1]) - (field[4] == "-") # -1 if field 4 == '-' eg. deletion
                        mutReg = f"{field[0]}:{loc}-{loc}"
                
                        # set region for mpileup
                        mpileup_cmd += ["-r", mutReg]
                        subprocess.check_call([str(command) for command in mpileup_cmd], stdout=file_out, stderr=log)
