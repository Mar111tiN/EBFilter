def partition_anno(anno_path, outputFilePrefix, partitionNum):

    file_in = open(anno_path, 'r')
    recordNum = 0 
    for line in file_in:
        recordNum += 1
    file_in.seek(0, 0)

    partitionNum_mod = min(recordNum, partitionNum)
    eachPartitionNum = recordNum / partitionNum_mod

    currentPartition = 0
    currentRecordNum = 0


    file_out = open(outputFilePrefix + "0", 'w')
    for line in file_in:
        print >> file_out, line.rstrip("\n")
        currentRecordNum += 1
        if currentRecordNum >= eachPartitionNum and currentPartition < partitionNum_mod - 1:
            currentPartition += 1
            currentRecordNum = 0
            file_out.close()
            file_out = open(outputFilePrefix + str(currentPartition), 'w')

    file_in.close()
    file_out.close()

    return partitionNum_mod


def merge_anno(inputFilePrefix, out_path, partitionNum):

    file_in = open(inputFilePrefix + "0", 'r')
    file_out = open(out_path, 'w')

    for i in range(partitionNum):
        file_in = open(inputFilePrefix + str(i), 'r')
        for line in file_in:
            print >> file_out, line.rstrip('\n')
        file_in.close()

    file_out.close()



def anno2pileup(anno_path, out_path, bam_or_pon, region):
    '''
    creates a pileup from all the entries in the anno file
    '''
    FNULL = open(os.devnull, 'w')

    with open(anno_path, 'r') as file_in:
        mpileup_cmd = ["samtools", "mpileup", "-B", "-d", "10000000", "-q", _q, "-Q", _Q, "--ff", _ff]

        # add tumor_bam or pon_list of bam files depending on file extension of bam_or_pon
        if (os.path.splitext(bam_or_pon)[-1] == '.bam'):
            mpileup_cmd += [bam_or_pon]
        else:
            mpileup_cmd += ["-b", bam_or_pon]

        if is_loption:
            # region_list.bed is generated by worker_anno
            mpileup_cmd += ["-l", f"{anno_path}.region_list.bed"]

            if region:
                mpileup_cmd = mpileup_cmd + ["-r", region]
            subprocess.check_call([str(command) for command in mpileup_cmd], stdout=file_out, stderr=FNULL) # maybe logging
        # no loption 
        else: 
            # get lines of anno file
            for line in file_in:
                print(line, bam_or_pon)
                field = line.rstrip('\n').split('\t')
                loc = int(field[1]) - (field[4] == "-") # -1 if field 4 == '-' eg. deletion
                mutReg = f"{field[0]}:{loc}-{loc}"
        
                # set region for mpileup
                mpileup_cmd += ["-r", mutReg]
                subprocess.check_call([str(command) for command in mpileup_cmd], stdout=file_out, stderr=FNULL) # maybe logging


    FNULL.close()
